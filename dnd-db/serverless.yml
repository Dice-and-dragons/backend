org: antonmykolenko
app: dnd-db-stack
service: dnd-db-stack

useDotenv: true

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-central-1
  stackName: ${self:service}-${self:provider.stage}
  memorySize: 1024
  timeout: 25
  logRetentionInDays: 14

custom:
  dbUserName: dnddb
  DBName: ${self:provider.stage}_dnd_db_stack

resources:
  Resources:
    # Database
    DbVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
    DBSecurityGroup:
      DependsOn: DbVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId:
          Ref: DbVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: "0.0.0.0/0"
        GroupDescription: Allow DB to accept all requests via 5432 port
    DbSubnetA:
      DependsOn: DbVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: DbVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.0.0/24
    DbSubnetB:
      DependsOn: DbVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: DbVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.1.0/24
    DbSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
          - !Ref DbSubnetA
          - !Ref DbSubnetB
    DbInternetGateway:
      Type: AWS::EC2::InternetGateway
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: DbVPC
        InternetGatewayId:
          Ref: DbInternetGateway

    RouteTablePublic:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: DbVPC
    RoutePublic:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: DbInternetGateway
        RouteTableId:
          Ref: RouteTablePublic
    RouteTableAssociationSubnetA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTablePublic
        SubnetId:
          Ref: DbSubnetA
    RouteTableAssociationSubnetB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTablePublic
        SubnetId:
          Ref: DbSubnetB
    DBInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 20
        DBInstanceClass: db.t4g.small
        Engine: postgres
        DBName: ${self:custom.DBName}
        MasterUsername: ${self:custom.dbUserName}
        ManageMasterUserPassword: true
        PubliclyAccessible: true
        StorageType: gp2
        VPCSecurityGroups:
          - !GetAtt DBSecurityGroup.GroupId
        DBSubnetGroupName:
          Ref: DbSubnetGroup
  Outputs:
    dbDetails:
      Value: 
        Fn::Sub: 
          - '{"username": "${self:custom.dbUserName}", "port": "${DBInstance.Endpoint.Port}", "password_secret": "${DBInstance.MasterUserSecret.SecretArn}", "db_name": "${self:custom.DBName}", "host": "${DBInstance.Endpoint.Address}"}'
          - Db_Name: ${self:custom.DBName}
            username: ${self:custom.dbUserName}
      Export: 
        Name: '${self:provider.stackName}-dbCredentials'